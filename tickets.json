{
  "metadata": {
    "version": "1.0.0",
    "last_updated": "2025-09-13T03:46:59Z",
    "next_id": 21,
    "project": "napkinwire"
  },
  "tickets": [
    {
      "id": "TICKET-001",
      "title": "Implement Claude usage analyzer from log files",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T01:35:57Z",
      "updated_at": "2025-09-12T05:09:20Z",
      "description": "Complete the stub in mcp/usage_analysis.py to analyze Claude Desktop logs and track API usage patterns, window resets, and model usage",
      "requirements": [
        "Parse Claude Desktop log files from %APPDATA%/Claude/logs or %LOCALAPPDATA%/Claude/logs",
        "Extract message timestamps and identify model used (Opus vs Sonnet)",
        "Detect rate limit messages and session boundaries",
        "Calculate usage windows (5 hours every 5 hours pattern)",
        "Track burn rate for different models",
        "Identify when window resets occur",
        "Return current window status and estimated remaining time"
      ],
      "acceptance_criteria": [
        "Successfully finds and parses Claude log files",
        "Accurately identifies usage patterns and window resets",
        "Returns dict with window_started, time_elapsed, estimated_remaining, messages_this_window",
        "Handles missing or malformed log files gracefully",
        "Performance: analyzes logs in under 2 seconds"
      ],
      "files_affected": [
        "mcp/usage_analysis.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-002",
      "title": "Port config.py to YAML with safe loading and validation",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T01:38:35Z",
      "updated_at": "2025-09-12T16:50:00Z",
      "description": "Replace hardcoded config.py with a YAML configuration file that supports safe loading, validation, and environment overrides",
      "requirements": [
        "Create config.yaml with paths section (tickets_path, logs_path, project_root)",
        "Use PyYAML with safe_load to prevent code injection",
        "Implement ConfigManager class with validation",
        "Support environment variable overrides (e.g. NAPKINWIRE_TICKETS_PATH)",
        "Add config schema validation using pydantic or dataclasses",
        "Include example.config.yaml for reference",
        "Handle missing config gracefully with sensible defaults",
        "Log config loading for debugging without stdout pollution"
      ],
      "acceptance_criteria": [
        "All hardcoded paths moved to config.yaml",
        "YAML loads without security vulnerabilities using safe_load",
        "Config validates required fields on load",
        "Graceful fallback to defaults if config missing",
        "Environment variable override support (NAPKINWIRE_CONFIG)",
        "Config hot-reload detection for development mode"
      ],
      "files_affected": [
        "config.py",
        "config.yaml",
        "main.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-003",
      "title": "Add MCP tool for Claude usage analysis with summary and detailed modes",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T01:45:56Z",
      "updated_at": "2025-09-12T05:09:36Z",
      "description": "Create MCP tool that leverages the existing usage analysis logic from usage_analysis.py to provide usage reports at different detail levels",
      "requirements": [
        "Import and use existing analyze_usage() function from usage_analysis.py",
        "Add parameter detail_level with options: summary, detailed, both",
        "Summary format: current window status, time remaining, messages this session, current burn rate",
        "Detailed format: last 5 sessions, model usage breakdown, peak usage times, rate limit events, recommendations",
        "Both format: summary section followed by detailed section",
        "Return dict with clear structure based on detail level",
        "Format timestamps in human-readable format",
        "Include helpful context like 'You have ~2.5 hours remaining' instead of just numbers"
      ],
      "acceptance_criteria": [
        "Tool successfully analyzes logs using existing usage_analysis.py logic",
        "Summary mode returns concise stats in under 1 second",
        "Detailed mode provides comprehensive usage patterns",
        "Both mode combines summary and detailed cleanly",
        "Handles missing or empty logs gracefully",
        "Returns user-friendly formatted output",
        "No stdout pollution or MCP communication issues"
      ],
      "files_affected": [
        "main.py",
        "mcp/usage_analysis.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-004",
      "title": "Create project awareness tool with file tree and documentation extraction",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T05:10:58Z",
      "updated_at": "2025-09-12T06:15:00Z",
      "description": "Create MCP tool that provides instant project awareness by showing file structure with extracted documentation and purpose for each file",
      "requirements": [
        "Scan project directory recursively from configured project root",
        "Extract Python module docstrings, class docstrings, and main function docs",
        "Extract JavaScript/TypeScript file-level comments, JSDoc, and export descriptions",
        "Parse README files for project overview",
        "Extract package.json descriptions for Node projects",
        "Generate tree structure with inline descriptions like 'main.py - MCP server with ticket tools'",
        "Support .napkinignore file for custom exclusions",
        "Include file stats (size, last modified) as optional parameter",
        "Identify hot files (recently modified) with optional highlighting",
        "Cache results with smart invalidation on file changes"
      ],
      "acceptance_criteria": [
        "Tool returns complete file tree with descriptions in under 3 seconds",
        "Successfully extracts module/class/function docstrings from Python files",
        "Extracts top-level comments and JSDoc from JavaScript/TypeScript files",
        "Handles missing docstrings gracefully with fallback descriptions",
        "Ignores common non-code directories (venv, node_modules, __pycache__, .git)",
        "Output is clean and hierarchical for easy AI parsing",
        "Supports filtering by file type or directory",
        "Handles large projects without memory issues"
      ],
      "files_affected": [
        "main.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-005",
      "title": "Implement PyWebView for seamless diagram editor integration",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T05:35:04Z",
      "updated_at": "2025-09-12T06:45:00Z",
      "description": "Replace temp file approach with PyWebView for seamless diagram input flow - spawn native window, draw, send directly to Claude without copy-paste",
      "requirements": [
        "Add PyWebView dependency to pyproject.toml",
        "Create spawn_diagram_editor MCP tool that creates PyWebView window",
        "Expose Python callback function to JavaScript bridge for receiving ASCII data",
        "Modify diagram.html to detect window.pywebview availability",
        "Change 'Generate' button logic to call window.pywebview.api.send_diagram(data) when in PyWebView mode",
        "Keep existing clipboard mode for regular web access",
        "Remove file:// protocol temp file saving logic",
        "Window size 1200x800 with title 'NapkinWire Diagram'",
        "Tool waits for window close and returns received ASCII or error message",
        "Add 30 second timeout with graceful handling"
      ],
      "acceptance_criteria": [
        "Diagram editor opens in native PyWebView window on tool call",
        "ASCII diagram data passes directly from JS to Python via bridge",
        "Window closes automatically after send",
        "No temp files created or needed",
        "Works on Windows and Linux",
        "Existing web/clipboard modes remain functional",
        "Clean error handling if window closed without sending",
        "Tool returns ASCII diagram with full annotations to Claude"
      ],
      "files_affected": [
        "main.py",
        "web/diagram.html",
        "web/diagram-gen.js",
        "pyproject.toml"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-006",
      "title": "Create roadmap append and list tools for idea capture",
      "status": "done",
      "priority": "medium",
      "created_at": "2025-09-12T05:44:28Z",
      "updated_at": "2025-09-12T12:13:20Z",
      "description": "Create simple roadmap tools for capturing ideas quickly without formal ticket overhead - just append ideas and view them",
      "requirements": [
        "Create append_roadmap_idea tool accepting title, description, and optional category",
        "Categories: now, next, soon, later, ideas (default: ideas)",
        "Append format: '## [Category] Title\\n*Added: timestamp*\\nDescription\\n---'",
        "Create list_roadmap_ideas tool with optional category filter",
        "Return formatted string suitable for display",
        "Create roadmap.md if doesn't exist with header",
        "Use file locking to prevent corruption",
        "Ideas should append to end of their category section",
        "Include idea count in list output"
      ],
      "acceptance_criteria": [
        "Both tools work without errors",
        "Ideas persist to roadmap.md file",
        "Append tool adds with timestamp and proper formatting",
        "List tool returns readable formatted output",
        "File created automatically if doesn't exist",
        "Handles concurrent appends gracefully",
        "No duplicate ideas added if called twice rapidly",
        "Clean markdown formatting maintained"
      ],
      "files_affected": [
        "main.py",
        "roadmap.md"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-007",
      "title": "Implement roadmap tools to capture these ideas properly",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T11:44:32Z",
      "updated_at": "2025-09-12T16:45:00Z",
      "description": "Create simple roadmap tools for capturing ideas quickly - append and list functionality for brain dumps without ticket ceremony",
      "requirements": [
        "Create append_roadmap_idea tool with title, description, category parameters",
        "Create list_roadmap_ideas tool with optional category filter",
        "Auto-create roadmap.md with your existing notes as initial content",
        "Categories: now, next, soon, later, ideas",
        "Include timestamp when ideas are added",
        "Preserve your existing 'Random notes' section"
      ],
      "acceptance_criteria": [
        "Tools successfully append ideas to roadmap.md",
        "List tool displays all roadmap items clearly",
        "Markdown formatting is clean and readable",
        "Categories are properly organized",
        "No data loss on concurrent writes"
      ],
      "files_affected": [
        "main.py",
        "roadmap.md"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-008",
      "title": "Fix PyWebView threading with subprocess approach",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T12:09:04Z",
      "updated_at": "2025-09-12T12:13:20Z",
      "description": "Fix PyWebView main thread issue by running diagram editor in subprocess with its own main thread, using temp file for communication",
      "requirements": [
        "Modify spawn_diagram_editor tool to use subprocess.run with Python code string",
        "Create temp file for result passing between subprocess and main process",
        "Subprocess code creates PyWebView window with diagram.html",
        "Expose Python callback function to JavaScript for data transfer",
        "JavaScript detects pywebview.api availability and calls send function",
        "Write result to temp file before window closes",
        "Main process reads temp file and returns content",
        "Clean up temp file after reading",
        "Add error handling for subprocess failures",
        "Include logging for debugging without stdout pollution"
      ],
      "acceptance_criteria": [
        "Diagram editor successfully opens in subprocess window",
        "ASCII data passes from JavaScript to Python correctly",
        "Window closes after sending data",
        "Tool returns ASCII diagram to Claude",
        "No main thread errors",
        "Handles window close without sending gracefully",
        "Works on Windows and Linux",
        "Timeout after 60 seconds if no response"
      ],
      "files_affected": [
        "main.py",
        "web/diagram.html",
        "web/diagram-gen.js"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-009",
      "title": "Create Claude Code queue daemon for automatic ticket execution",
      "status": "todo",
      "priority": "high",
      "created_at": "2025-09-12T12:18:28Z",
      "updated_at": "2025-09-12T12:18:28Z",
      "description": "Create a file-based queue system with daemon that watches for tickets and automatically launches Claude Code to implement them",
      "requirements": [
        "Create claude_code_daemon.py script that polls ticket_queue directory",
        "Add queue_ticket_for_claude_code MCP tool that writes ticket files",
        "Queue directory: ./ticket_queue/ (create if not exists)",
        "File format: TICKET-XXX.queue containing ticket details",
        "Daemon polls every 5 seconds for new .queue files",
        "Launch Claude Code with: subprocess.run(['claude', 'code', f'Implement {ticket_id} from tickets.json'])",
        "Move processed files to ./ticket_queue/processed/ with timestamp",
        "Add daemon status check tool to see if it's running",
        "Include start instructions in docstring or README",
        "Daemon should be stoppable with Ctrl+C gracefully"
      ],
      "acceptance_criteria": [
        "Daemon successfully watches queue directory for new tickets",
        "Claude Code launches when ticket file appears",
        "Non-blocking operation - daemon continues running",
        "Ticket files removed after processing",
        "Graceful error handling if Claude Code fails",
        "Daemon can be started/stopped manually",
        "Logs activity to file for debugging",
        "Works with relative paths within git repository"
      ],
      "files_affected": [
        "claude_code_daemon.py",
        "main.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-010",
      "title": "Initiative Feed: Database setup and basic operations",
      "status": "todo",
      "priority": "high",
      "created_at": "2025-09-12T16:18:21Z",
      "updated_at": "2025-09-12T16:18:21Z",
      "description": "Set up SQLite database for Initiative Feed with category tables and basic read/write operations",
      "requirements": [
        "Create SQLite database file: initiative_feed.db",
        "Schema: id, timestamp, category, priority, message, context fields",
        "Create three tables for different categories",
        "Write function to add feed entry",
        "Write function to read entries by category",
        "Create MCP tool: read_initiative_feed(category=None, limit=10)",
        "Return formatted dict with entries"
      ],
      "acceptance_criteria": [
        "SQLite database created with proper schema",
        "Tables for: codebase_insights, workflow_patterns, quality_metrics",
        "CRUD functions work without errors",
        "MCP tool returns feed entries in readable format",
        "Database file stored in project directory",
        "Handles empty database gracefully",
        "Timestamp and priority fields functioning"
      ],
      "files_affected": [
        "main.py",
        "initiative_feed.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-011",
      "title": "Initiative Feed: Git change detector",
      "status": "todo",
      "priority": "high",
      "created_at": "2025-09-12T16:18:32Z",
      "updated_at": "2025-09-12T16:18:32Z",
      "description": "Create git change detector that parses diffs and extracts what changed in commits",
      "requirements": [
        "Create function to run git diff HEAD~1",
        "Parse output to extract changed files list",
        "Get commit message with git log -1",
        "Get commit hash and author",
        "Format as feed entry with context",
        "Store in database using ticket 1's functions",
        "Handle case when not in git repository",
        "Return summary of what was captured"
      ],
      "acceptance_criteria": [
        "Successfully parses git diff output",
        "Extracts list of changed files",
        "Captures commit message and hash",
        "Stores data in feed database",
        "Handles different git operations (add, modify, delete)",
        "Works with relative file paths",
        "Processes multi-file commits correctly"
      ],
      "files_affected": [
        "initiative_feed.py",
        "git_monitor.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-012",
      "title": "Initiative Feed: Git hook installer",
      "status": "todo",
      "priority": "medium",
      "created_at": "2025-09-12T16:18:41Z",
      "updated_at": "2025-09-12T16:18:41Z",
      "description": "Install git post-commit hook that automatically triggers feed updates after commits",
      "requirements": [
        "Create install_hook.py script",
        "Generate post-commit hook file content",
        "Hook calls python script with git info",
        "Check if hook already exists",
        "Backup existing hooks if present",
        "Make hook executable on Linux",
        "Add uninstall function",
        "Include instructions for manual setup",
        "Test with actual git commit"
      ],
      "acceptance_criteria": [
        "Git hook successfully installs in .git/hooks/",
        "Hook triggers after each commit",
        "Executes git change detector from ticket 11",
        "Writes results to feed database",
        "Non-blocking operation",
        "Works on Windows and Linux",
        "Can be uninstalled cleanly",
        "Doesn't interfere with existing hooks"
      ],
      "files_affected": [
        "install_hook.py",
        ".git/hooks/post-commit"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-013",
      "title": "Initiative Feed: Summary presenter tool",
      "status": "todo",
      "priority": "medium",
      "created_at": "2025-09-12T16:18:51Z",
      "updated_at": "2025-09-12T16:18:51Z",
      "description": "Create MCP tool that queries feed database and presents organized summary of insights",
      "requirements": [
        "Create check_initiative_feed MCP tool",
        "Query last N entries from each category",
        "Sort by priority then timestamp",
        "Format as readable sections",
        "Include entry counts per category",
        "Auto-cleanup entries older than 30 days",
        "Support filtering by date range",
        "Return structured dict for Claude to interpret"
      ],
      "acceptance_criteria": [
        "Tool queries database and returns formatted summary",
        "Groups entries by category correctly",
        "Respects limit parameter",
        "Formats output for easy reading",
        "Handles empty database gracefully",
        "Shows most recent entries first",
        "Cleans old entries (30+ days) automatically",
        "Returns counts per category"
      ],
      "files_affected": [
        "main.py",
        "initiative_feed.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-014",
      "title": "Initiative Feed: Code comment extractor",
      "status": "todo",
      "priority": "medium",
      "created_at": "2025-09-12T16:19:02Z",
      "updated_at": "2025-09-12T16:19:02Z",
      "description": "Scan codebase for docstrings and comments to extract purpose and context information",
      "requirements": [
        "Create scan_code_comments function",
        "Use regex to find Python docstrings",
        "Extract top-of-file comments from JS/TS",
        "Find all TODO/FIXME/NOTE comments",
        "Parse out the 'why' from docstrings",
        "Store each finding as feed entry",
        "Category: 'codebase_insights'",
        "Include file path in context",
        "Run on demand, not automatic"
      ],
      "acceptance_criteria": [
        "Successfully extracts Python docstrings",
        "Extracts JavaScript/TypeScript top comments",
        "Finds TODO and FIXME comments",
        "Stores findings in feed database",
        "Handles files without comments gracefully",
        "Processes multiple files efficiently",
        "Groups findings by file",
        "Works with project tree structure"
      ],
      "files_affected": [
        "code_scanner.py",
        "initiative_feed.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-015",
      "title": "Fix usage analyzer time calculation and window detection bugs",
      "status": "done",
      "priority": "high",
      "created_at": "2025-09-12T16:22:30Z",
      "updated_at": "2025-09-12T16:39:43Z",
      "description": "Fix usage analyzer's broken time calculations and window detection logic - currently showing 11 hours elapsed when only 22 minutes have passed",
      "requirements": [
        "Debug timezone conversion between log timestamps and local time",
        "Fix window boundary detection (5 hours usage, 5 hours cooldown)",
        "Ensure message count only includes current window",
        "Verify time elapsed matches actual time since window started",
        "Add logging to show calculation steps for debugging",
        "Test with various scenarios: fresh window, mid-window, expired",
        "Handle case where logs span multiple days",
        "Ensure burn rate calculation uses correct time period",
        "Add sanity checks (elapsed time cannot exceed 5 hours in active window)"
      ],
      "acceptance_criteria": [
        "Correctly identifies current 5-hour window start time",
        "Accurate time elapsed calculation",
        "Proper timezone handling (local vs UTC)",
        "Only counts messages from current window, not cumulative",
        "Detects window resets accurately",
        "Time remaining calculation matches actual limit",
        "Handles edge cases like window just started or just expired",
        "Math calculations are verifiable and correct"
      ],
      "files_affected": [
        "mcp/usage_analysis.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-016",
      "title": "Fix diagram editor subprocess timeout issue",
      "status": "todo",
      "priority": "high",
      "created_at": "2025-09-12T16:28:02Z",
      "updated_at": "2025-09-12T16:28:02Z",
      "description": "Fix diagram editor timeout issue - tool works in testing but times out after 60 seconds when called from Claude Desktop",
      "requirements": [
        "Debug why subprocess isn't launching properly from MCP context",
        "Check if PATH or environment variables are different in MCP",
        "Verify python executable path is correct",
        "Test if subprocess needs shell=True on Windows",
        "Add debug logging to see where it's failing",
        "Consider removing timeout or making it configurable",
        "Test alternative launch methods if subprocess fails",
        "Ensure window actually appears on screen",
        "Handle case where pywebview needs different initialization in subprocess"
      ],
      "acceptance_criteria": [
        "Diagram editor opens successfully when called from Claude",
        "No timeout errors",
        "Window appears and is interactive",
        "Subprocess launches correctly",
        "Works from both Claude Desktop and testing environments",
        "Error messages are informative if it fails",
        "Handles both quick and slow responses gracefully"
      ],
      "files_affected": [
        "main.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-017",
      "title": "Create Python ticket formatter/summary script",
      "status": "done",
      "priority": "medium",
      "created_at": "2025-09-12T16:37:50Z",
      "updated_at": "2025-09-12T16:52:00Z",
      "description": "Create a simple Python script that reads tickets.json and outputs a formatted summary without needing LLM calls",
      "requirements": [
        "Read tickets.json file",
        "Parse and group tickets by status (todo/in_progress/done/blocked)",
        "Within each status, sort by priority (high/medium/low)",
        "Generate text output with sections for each status",
        "Show ticket ID, title, and priority for each",
        "Add summary counts at the top",
        "Highlight any blocked tickets or dependencies",
        "Optional: add ASCII art dividers for readability",
        "Optional: colorized output for terminal",
        "Make it executable from command line"
      ],
      "acceptance_criteria": [
        "Script runs standalone without dependencies",
        "Outputs clear text summary of tickets",
        "Groups tickets by status and priority",
        "Shows counts for each category",
        "Highlights critical/blocked tickets",
        "Runs in under 1 second",
        "Works with current tickets.json format",
        "Output is easy to read at a glance"
      ],
      "files_affected": [
        "ticket_summary.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-018",
      "title": "Research Podman containerization for MCP on Windows",
      "status": "todo",
      "priority": "medium",
      "created_at": "2025-09-13T03:40:10Z",
      "updated_at": "2025-09-13T03:40:10Z",
      "description": "Research Podman containerization for NapkinWire MCP server on Windows, create report covering feasibility, setup, volume handling, and configuration approaches",
      "requirements": [
        "Research Podman installation on Windows (WSL2 vs native)",
        "Document how to handle volume mounts for tickets.json and project files",
        "Investigate passing config via arguments vs environment variables",
        "Compare resource usage vs native Python",
        "Document Dockerfile structure for MCP server",
        "Research stdio communication through container",
        "Identify potential issues with GUI tools (PyWebView)",
        "Create example Podman commands for testing",
        "List pros and cons vs current approach",
        "Provide recommendation on whether to proceed"
      ],
      "acceptance_criteria": [
        "Research document created as markdown file",
        "Covers all key aspects of Podman on Windows for MCP",
        "Provides clear recommendations",
        "Includes practical examples",
        "Addresses volume mounting and path issues",
        "No implementation required, just research"
      ],
      "files_affected": [
        "podman_research.md"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-019",
      "title": "Implement local HTTP server for diagram editor instead of PyWebView",
      "status": "todo",
      "priority": "high",
      "created_at": "2025-09-13T03:44:12Z",
      "updated_at": "2025-09-13T03:44:12Z",
      "description": "Replace PyWebView with local HTTP server approach - start server, open browser to web/diagram.html, capture POST request with ASCII data, return to Claude",
      "requirements": [
        "Modify spawn_diagram_editor tool to start HTTP server on localhost",
        "Find available port (try 8765, increment if busy)",
        "Serve web/ directory as static files",
        "Add POST endpoint /send_to_claude to receive ASCII data",
        "Modify diagram.html to detect localhost mode",
        "Change generate button to POST to /send_to_claude when on localhost",
        "Open browser automatically to http://localhost:PORT/diagram.html",
        "Server waits for POST request with 60 second timeout",
        "Return received ASCII data and shut down server",
        "Handle CORS if needed for localhost"
      ],
      "acceptance_criteria": [
        "Local HTTP server starts on available port",
        "Browser opens automatically with diagram.html",
        "Server receives POST request with ASCII data",
        "Tool returns ASCII data to Claude",
        "Server shuts down after receiving data",
        "No timeout errors",
        "Works on Windows and Linux",
        "Handles user closing browser without sending"
      ],
      "files_affected": [
        "main.py",
        "web/diagram.html",
        "web/diagram-gen.js"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    },
    {
      "id": "TICKET-020",
      "title": "Create MCP test client for local tool testing",
      "status": "todo",
      "priority": "high",
      "created_at": "2025-09-13T03:46:59Z",
      "updated_at": "2025-09-13T03:46:59Z",
      "description": "Create a simple MCP test client that simulates Claude's tool calls for testing without burning API tokens",
      "requirements": [
        "Create standalone test_client.py script",
        "Start MCP server using subprocess with same args as Claude config",
        "Establish stdio communication with server",
        "Send proper JSON-RPC messages for tool calls",
        "Interactive mode: prompt for tool name and parameters",
        "Display tool response formatted nicely",
        "List available tools command",
        "Handle connection errors and timeouts",
        "Example usage in comments or docstring"
      ],
      "acceptance_criteria": [
        "Test client starts MCP server same way Claude does",
        "Can call any tool by name with parameters",
        "Shows tool response clearly",
        "Handles errors gracefully",
        "Simple command-line interface",
        "No token costs for testing"
      ],
      "files_affected": [
        "test_client.py"
      ],
      "dependencies": [],
      "outcome": null,
      "notes": null
    }
  ],
  "templates": {}
}